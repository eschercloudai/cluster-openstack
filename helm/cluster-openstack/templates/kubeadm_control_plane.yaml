apiVersion: controlplane.cluster.x-k8s.io/v1beta1
kind: KubeadmControlPlane
metadata:
  labels:
    {{- include "labels.common" $ | nindent 4 }}
  name: {{ include "resource.default.name" $ }}
  namespace: {{ $.Release.Namespace }}
spec:
  kubeadmConfigSpec:
    clusterConfiguration:
      apiServer:
        certSANs:
          - 127.0.0.1
          - localhost
          {{- if .Values.apiServer.certSANs }}
          {{- range $v := .Values.apiServer.certSANs }}
          - {{ $v }}
          {{- end }}
          {{- end }}
        extraArgs:
          cloud-provider: external
          enable-admission-plugins: {{ .Values.apiServer.enableAdmissionPlugins }}
          {{- if .Values.apiServer.featureGates }}
          feature-gates: {{ .Values.apiServer.featureGates }}
          {{- end }}
          kubelet-preferred-address-types: "InternalIP"
          logtostderr: "true"
          profiling: "false"
          runtime-config: "api/all=true"
          tls-cipher-suites: "TLS_AES_128_GCM_SHA256,TLS_AES_256_GCM_SHA384,TLS_CHACHA20_POLY1305_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_256_GCM_SHA384"
      controllerManager:
        extraArgs:
          authorization-always-allow-paths: "/healthz,/readyz,/livez,/metrics"
          bind-address: "0.0.0.0"
          cloud-provider: external
          feature-gates: {{ .Values.controllerManager.featureGates }}
          logtostderr: "true"
          profiling: "false"
      etcd:
        local:
          extraArgs:
            listen-metrics-urls: "http://0.0.0.0:2381"
      scheduler:
        extraArgs:
          authorization-always-allow-paths: "/healthz,/readyz,/livez,/metrics"
          bind-address: "0.0.0.0"
    initConfiguration:
      nodeRegistration:
        kubeletExtraArgs:
          cloud-provider: external
        name: {{ include "nodeName" . }}
    joinConfiguration:
      nodeRegistration:
        kubeletExtraArgs:
          {{- include "kubeletExtraArgs" . | nindent  10}}
        name: {{ include "nodeName" . }}
    {{- if not .Values.ignition.enable }}
    useExperimentalRetryJoin: true
    {{- end }}
    files:
      {{- include "kubeProxyFiles" . | nindent 6 }}
    preKubeadmCommands:
      {{- include "nodeNameReplacePreKubeadmCommands" . | nindent 6 }}
      {{- include "kubeProxyPreKubeadmCommands" . | nindent 6 }}
    {{- if .Values.ignition.enable }}
    format: ignition
    ignition:
      containerLinuxConfig:
        additionalConfig: |
          systemd:
            units:
            - name: coreos-metadata-sshkeys@.service
              enabled: true
            - name: kubeadm.service
              enabled: true
              dropins:
              - name: 10-flatcar.conf
                contents: |
                  [Unit]
                  Requires=containerd.service coreos-metadata.service
                  After=containerd.service coreos-metadata.service
                  [Service]
                  EnvironmentFile=/run/metadata/flatcar
    {{- end }}
  machineTemplate:
    infrastructureRef:
      apiVersion: {{ include "infrastructureApiVersion" . }}
      kind: OpenStackMachineTemplate
      name: {{ include "resource.default.name" . }}-control-plane-{{ include "osmtRevisionOfControlPlane" $ }}
  version: {{ .Values.kubernetesVersion }}
  replicas: {{ .Values.controlPlane.replicas }}
